---

# == Notes ==

# - GitLab automatically passes artifacts from previous stages by default
# - Set required secret variables at: https://gitlab.data.bas.ac.uk/web-apps/bsk/bas-style-kit-jinja2-templates/settings/ci_cd

# = Secret variables
# - Variables are grouped by section in KEY: "value" format (e.g. FOO: "bar")
#   Sensitive values are represented by "[Sensitive]"
#
# - PyPi (production) - create tokens at https://pypi.org/manage/account/
# > PYPI_TOKEN (protected): "[Sensitive]"

# == Global settings ==

stages:
  - 📋 lint
  - 🏗 build
  - 🚚 publish

variables:
  APP_NAME: bas-style-kit-jinja-templates

image:
  name: docker-registry.data.bas.ac.uk/web-apps/bsk/bas-style-kit-jinja2-templates:latest
  entrypoint: [""]

default:
  before_script:
    - "ln -s /.venv .venv"
    - "poetry install --no-interaction --no-ansi"

# == Jobs ==

lint:
  stage: 📋 lint
  needs: []
  script:
    - "poetry check"
    - "poetry run black --check src/ app.py"
    - "poetry run bandit -r src/ app.py"
  rules:
    - changes:
        - '**/*.py'

build:
  stage: 🏗 build
  needs: []
  script:
    - "poetry version 0.0.0"
    - "poetry build"
  artifacts:
    paths:
      - dist
    expire_in: 1 week
  rules:
    -
      if: '$CI_COMMIT_TAG == null'
      changes:
        - '**/*.py'

publish:
  stage: 🚚 publish
  needs:
    - lint
  before_script:
    - "ln -s /.venv .venv"
    - "poetry install --no-interaction --no-ansi"
    - "poetry config pypi-token.pypi $PYPI_TOKEN --local"
  script:
    - "poetry publish --build --no-interaction"
  artifacts:
    paths:
      - dist
    expire_in: 1 month
  rules:
    - if: '$CI_COMMIT_TAG != null'
  environment:
    name: production
    url: https://pypi.org/project/bas-style-kit-jinja-templates/
